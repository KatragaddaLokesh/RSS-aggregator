// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
Insert into users (id, created_at,updated_at, name, api_keys)
values ($1,$2,$3,$4,
    encode(sha256(random()::text::bytea),'hex')
)
returning id, created_at, updated_at, name, api_keys
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKeys,
	)
	return i, err
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
select id, created_at, updated_at, name, api_keys from users where api_keys = $1
`

func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKeys string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKeys)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKeys,
	)
	return i, err
}
